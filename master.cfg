# -*- python -*-
# ex: set filetype=python:

# Disable complaints about "constant names" from PyLint:
# pylint: disable=C0103

"""
Embecosm Buildbot configuration. Used with Buildbot 0.9.8.

Do not commit secrets to this file - it is kept in a public repository!
"""

# Set up the buildmaster config
# =============================
#
# Note that this section does not usually need to be edited for making
# day-to-day changes to the buildbot configuration. Skip ahead to the
# "Builder and Scheduler configuration" further down.

import buildbot_secrets
from buildbot.plugins import schedulers, steps, util, worker

# Start with an empty config
c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []

# Slave configuration
c['workers'] = [worker.Worker("worker1", buildbot_secrets.worker1_password)]
c['protocols'] = {'pb': {'port': 9989}}

# Database configuration
c['db'] = {'db_url': "sqlite:///state.sqlite"}

# Web interface configuration
c['title'] = "Embecosm"
c['titleURL'] = "http://www.embecosm.com"
c['buildbotURL'] = "https://buildbot.embecosm.com:8011/"

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

# Authz configuration to allow admins to do everything, but anonymous
# people to look at build results

auth = util.UserPasswordAuth(buildbot_secrets.userdb)

authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role="admins"),
    ],
    roleMatchers=[
        util.RolesFromUsername(
            roles=['admins'],
            usernames=buildbot_secrets.admins)
    ]
)

c['www']['auth'] = auth
c['www']['authz'] = authz


# Builder and and Scheduler configuration
# =======================================
#
# Most configuration changes take place in this section - e.g. to add new
# builders or schedulers to the Buildbot, or to change what the builders
# do.

# Embecosm's RISC-V toolchain repository.
RISCV_TOOLCHAIN_REPO = 'https://github.com/embecosm/riscv-toolchain'


def riscv_builder():
    '''Create builder and schedulers for riscv toolchain.

    All repositories are cloned from the local cache maintained by the
    riscv-reposync builder.'''

    # A recent verilator is required, so we add it to the environment.
    env = {
        'BASE_URL': '/data-ssd/build/reposync',
        'PKG_CONFIG_PATH': '/opt/verilator-3.906/share/pkgconfig',
        'PATH': ['/opt/verilator-3.906/bin', '${PATH}'],
    }

    # Shortcuts used to build URLs and file locations
    artifacts = '/data-hdd/buildwww/artifacts'
    build_id = '%(prop:buildername)s-%(prop:buildnumber)s'

    # Start with a new build factory
    f = util.BuildFactory()

    # Update the local cached repositories
    f.addStep(steps.Trigger(
        schedulerNames=['trigger-riscv-reposync'],
        waitForFinish=True))

    # Clean up anything from an old build
    f.addStep(steps.RemoveDirectory(
        dir="build",
        description='Remove old build',
        name="cleanup"))

    # Clone the toolchain repo
    f.addStep(steps.Git(
        repourl=RISCV_TOOLCHAIN_REPO,
        mode='incremental',
        workdir='build/toolchain',
        description='Clone toolchain repo',
        name="clone-toolchain"))

    # Clone all other repos
    f.addStep(steps.ShellCommand(
        command=["./clone-all.sh"],
        workdir='build/toolchain',
        env=env,
        description='Run clone-all.sh',
        name="clone-all.sh"))

    # Check out the correct branch of all repos
    f.addStep(steps.ShellCommand(
        command=["./checkout-all.sh"],
        workdir='build/toolchain',
        description='Run checkout-all.sh',
        name="checkout-all.sh"))

    # Build the toolchain and models
    f.addStep(steps.ShellCommand(
        command=["./build-all.sh"],
        workdir='build/toolchain',
        env=env,
        haltOnFailure=False,
        description='Build all',
        name="build-all.sh"))

    # Upload the Logs from the build

    logs_dir = util.Interpolate('%s/%s-logs' % (artifacts, build_id))
    url = util.Interpolate('artifacts/%s-logs' % build_id)

    f.addStep(steps.DirectoryUpload(
        workersrc='logs',
        masterdest=logs_dir,
        url=url,
        name='upload_build_logs',
        description='Upload build logs to web server'))

    # Run the GCC tests
    f.addStep(steps.ShellCommand(
        command=[
            "./run-tests.sh",
            "--with-board", "riscv-ri5cy",
            "--tool", "gcc"],
        workdir='build/toolchain',
        env=env,
        timeout=3600,
        haltOnFailure=False,
        description='GCC C Tests',
        name='run-tests.sh'
    ))

    # Run the GDB tests
    f.addStep(steps.ShellCommand(
        command=[
            "./run-tests.sh",
            "--with-board", "riscv-ri5cy",
            "--tool", "gdb"],
        workdir='build/toolchain',
        env=env,
        timeout=3600,
        haltOnFailure=False,
        description='GDB Tests',
        name='run-tests.sh'
    ))

    # Upload logs from GCC tests

    gcclogLoc = util.Interpolate('%s/%s-logs/gcc.log' % (artifacts, build_id))
    gcclogurl = util.Interpolate('artifacts/%s-logs/gcc.log' % build_id)

    f.addStep(steps.FileUpload(
        workersrc='build/gcc-stage-2/gcc/testsuite/gcc/gcc.log',
        masterdest=gcclogLoc,
        url=gcclogurl,
        name='upload_gcc_log',
        description="Upload gcc.log"))

    gccsumLoc = util.Interpolate('%s/%s-logs/gcc.sum' % (artifacts, build_id))
    gccsumurl = util.Interpolate('artifacts/%s-logs/gcc.sum' % build_id)

    f.addStep(steps.FileUpload(
        workersrc='build/gcc-stage-2/gcc/testsuite/gcc/gcc.sum',
        masterdest=gccsumLoc,
        url=gccsumurl,
        name='upload_gcc_sum',
        description="Upload gcc.sum"))

    # Upload logs from GDB tests

    gdblogLoc = util.Interpolate('%s/%s-logs/gdb.log' % (artifacts, build_id))
    gdblogurl = util.Interpolate('artifacts/%s-logs/gdb.log' % build_id)

    f.addStep(steps.FileUpload(
        workersrc='build/gdb/gdb/testsuite/gdb.log',
        masterdest=gdblogLoc,
        url=gdblogurl,
        name='upload_gdb_log',
        description="Upload gdb.log"))

    gdbsumLoc = util.Interpolate('%s/%s-logs/gdb.sum' % (artifacts, build_id))
    gdbsumurl = util.Interpolate('artifacts/%s-logs/gdb.sum' % build_id)

    f.addStep(steps.FileUpload(
        workersrc='build/gdb/gdb/testsuite/gdb.sum',
        masterdest=gdbsumLoc,
        url=gdbsumurl,
        name='upload_gdb_sum',
        description="Upload gdb.sum"))

    # Add this builder to the configuration
    c['builders'].append(util.BuilderConfig(
        name="riscv-toolchain",
        workernames=["worker1"],
        factory=f))

    # Permit forcing the build any time through the web interface
    c['schedulers'].append(
        schedulers.ForceScheduler(
            name="force-riscv-toolchain",
            builderNames=["riscv-toolchain"]
        )
    )

    # Build every night at 9pm
    c['schedulers'].append(
        schedulers.Nightly(
            name="nightly-riscv-toolchain",
            hour=21, minute=0,
            builderNames=['riscv-toolchain']
        )
    )


# Invoke the RISC-V builder setup
riscv_builder()


def riscv_repo_sync():
    '''Create builder and schedulers for riscv-reposync.

    This updates the locally-cached RISC-V toolchain repos'''

    f = util.BuildFactory()
    f.addStep(steps.ShellCommand(
        command=['/data-ssd/build/reposync/sync.sh']))
    c['builders'].append(util.BuilderConfig(
        name='riscv-reposync',
        workernames=['worker1'],
        factory=f))

    c['schedulers'].append(
        schedulers.ForceScheduler(
            name="force-riscv-reposync",
            builderNames=["riscv-reposync"]
        )
    )
    c['schedulers'].append(
        schedulers.Triggerable(
            name='trigger-riscv-reposync',
            builderNames=['riscv-reposync']
        )
    )


# Invoke the RISC-V repository sync builder setup
riscv_repo_sync()
